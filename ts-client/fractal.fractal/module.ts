// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgRequestExchange } from "./types/fractal/fractal/tx";
import { MsgCancelExchange } from "./types/fractal/fractal/tx";
import { MsgSettleExchange } from "./types/fractal/fractal/tx";
import { MsgApproveExchange } from "./types/fractal/fractal/tx";
import { MsgSwapExchange } from "./types/fractal/fractal/tx";

import { Exchange as typeExchange} from "./types"
import { FractalPacketData as typeFractalPacketData} from "./types"
import { NoData as typeNoData} from "./types"
import { Params as typeParams} from "./types"

export { MsgRequestExchange, MsgCancelExchange, MsgSettleExchange, MsgApproveExchange, MsgSwapExchange };

type sendMsgRequestExchangeParams = {
  value: MsgRequestExchange,
  fee?: StdFee,
  memo?: string
};

type sendMsgCancelExchangeParams = {
  value: MsgCancelExchange,
  fee?: StdFee,
  memo?: string
};

type sendMsgSettleExchangeParams = {
  value: MsgSettleExchange,
  fee?: StdFee,
  memo?: string
};

type sendMsgApproveExchangeParams = {
  value: MsgApproveExchange,
  fee?: StdFee,
  memo?: string
};

type sendMsgSwapExchangeParams = {
  value: MsgSwapExchange,
  fee?: StdFee,
  memo?: string
};


type msgRequestExchangeParams = {
  value: MsgRequestExchange,
};

type msgCancelExchangeParams = {
  value: MsgCancelExchange,
};

type msgSettleExchangeParams = {
  value: MsgSettleExchange,
};

type msgApproveExchangeParams = {
  value: MsgApproveExchange,
};

type msgSwapExchangeParams = {
  value: MsgSwapExchange,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgRequestExchange({ value, fee, memo }: sendMsgRequestExchangeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRequestExchange: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRequestExchange({ value: MsgRequestExchange.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRequestExchange: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCancelExchange({ value, fee, memo }: sendMsgCancelExchangeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCancelExchange: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCancelExchange({ value: MsgCancelExchange.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCancelExchange: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSettleExchange({ value, fee, memo }: sendMsgSettleExchangeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSettleExchange: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSettleExchange({ value: MsgSettleExchange.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSettleExchange: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgApproveExchange({ value, fee, memo }: sendMsgApproveExchangeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgApproveExchange: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgApproveExchange({ value: MsgApproveExchange.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgApproveExchange: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSwapExchange({ value, fee, memo }: sendMsgSwapExchangeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSwapExchange: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSwapExchange({ value: MsgSwapExchange.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSwapExchange: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgRequestExchange({ value }: msgRequestExchangeParams): EncodeObject {
			try {
				return { typeUrl: "/fractal.fractal.MsgRequestExchange", value: MsgRequestExchange.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRequestExchange: Could not create message: ' + e.message)
			}
		},
		
		msgCancelExchange({ value }: msgCancelExchangeParams): EncodeObject {
			try {
				return { typeUrl: "/fractal.fractal.MsgCancelExchange", value: MsgCancelExchange.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCancelExchange: Could not create message: ' + e.message)
			}
		},
		
		msgSettleExchange({ value }: msgSettleExchangeParams): EncodeObject {
			try {
				return { typeUrl: "/fractal.fractal.MsgSettleExchange", value: MsgSettleExchange.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSettleExchange: Could not create message: ' + e.message)
			}
		},
		
		msgApproveExchange({ value }: msgApproveExchangeParams): EncodeObject {
			try {
				return { typeUrl: "/fractal.fractal.MsgApproveExchange", value: MsgApproveExchange.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgApproveExchange: Could not create message: ' + e.message)
			}
		},
		
		msgSwapExchange({ value }: msgSwapExchangeParams): EncodeObject {
			try {
				return { typeUrl: "/fractal.fractal.MsgSwapExchange", value: MsgSwapExchange.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSwapExchange: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						Exchange: getStructure(typeExchange.fromPartial({})),
						FractalPacketData: getStructure(typeFractalPacketData.fromPartial({})),
						NoData: getStructure(typeNoData.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			FractalFractal: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;